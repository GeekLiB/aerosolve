// This config file resides in src/main/resources for distribution with jars
// but a local override can be made in the main directory.

// Directory to training data, model, output images
rootDir = ${PWD}"/output"
// The image to read
input = "file://"${PWD}"/crocus.jpg"

// Location of training data
trainingData =${rootDir}"/training_data"

// Location of the model
linear_model_name=${rootDir}"/model/linear.model"

make_training {
  input = ${input}
  output = ${trainingData}
}

train_model {
  input = ${trainingData}
  modelKey = "linear_model"
}

// This transform does nothing.
identity_transform {
  transform : list
  transforms : [ ]
}

quantize_pixel_location {
  transform : multiscale_grid_quantize
  field1: "LOC"
  # Grid up the pixels into squares of the following sizes.
  # Use relatively prime grids to create jitter.
  buckets : [ 3.0, 7.0, 17.0, 31.0, 47.0, 67.0, 79.0, 89.0, 97.0 ]
  value1 : "Y"
  value2 : "X"
  output : "QLOC"
}

C_X_QLOC {
  transform : cross
  field1 : "C" // Color channel
  field2 : "QLOC" // Quantized location
  output : "C_x_QLOC"
}

combined_transform {
  transform : list
  transforms : [
    C_X_QLOC
  ]
}

linear_model {
  trainer : "linear"
  model_output : ${linear_model_name}
  // Name of the special feature that contains the label
  rank_key : "$target"
  // What kind of loss function
  loss : "regression"
  // The amount of error we tolerate
  epsilon : 0.01
  learning_rate : 0.1
  num_bags : 4
  iterations : 2
  lambda : 0.001
  lambda2 : 0.001
  # Pixel locations need to be gridded
  context_transform : quantize_pixel_location
  # Items are just color channels no need to transform
  item_transform : identity_transform
  # Cross the pixel locations with the color channel.
  combined_transform : combined_transform
}

make_impression {
  modelKey = "linear_model"
  width = 2048
  height = 2048
  output = ${rootDir}"/impression.jpg"
}

make_movie {
  modelKey = "linear_model"
  width = 2048
  height = 2048
  numFrames = 30
  output = ${rootDir}"/movie%03d.jpg"
}